#!/usr/bin/env python3
"""
üß™ TEST: Verificar uso real de modelos TCN para se√±ales
"""

import asyncio
from simple_professional_manager import SimpleProfessionalTradingManager

async def test_tcn_signals():
    """üß™ Test completo de se√±ales TCN"""
    print("üß™ TESTING SE√ëALES CON MODELOS TCN")
    print("=" * 50)
    
    try:
        # Inicializar manager completo
        manager = SimpleProfessionalTradingManager()
        await manager.initialize()  # ‚úÖ Inicializaci√≥n completa
        
        print(f"\nüìä ESTADO DE MODELOS TCN:")
        print(f"   Activos: {manager.tcn_models_active}")
        print(f"   Modelos: {list(manager.tcn_models.keys())}")
        print(f"   Balance actual: ${manager.current_balance:.2f}")
        
        # Datos de prueba
        test_prices = {
            'BTCUSDT': 109500.0,
            'ETHUSDT': 2800.0,
            'BNBUSDT': 670.0
        }
        
        print(f"\nüîç GENERANDO SE√ëALES DE PRUEBA:")
        
        # Generar se√±ales
        signals = await manager._generate_simple_signals(test_prices)
        
        print(f"\nüìä RESULTADO DE SE√ëALES:")
        print(f"   Total se√±ales: {len(signals)}")
        
        for symbol, signal_data in signals.items():
            print(f"\n   üîç {symbol}:")
            print(f"      Acci√≥n: {signal_data['signal']}")
            print(f"      Confianza: {signal_data['confidence']:.1%}")
            print(f"      Precio: ${signal_data['current_price']:.4f}")
            print(f"      Fuente: {signal_data['reason']}")
            
            if 'tcn_details' in signal_data:
                tcn = signal_data['tcn_details']
                print(f"      ü§ñ TCN usado: {tcn['model_used']}")
                print(f"      üéØ Raw prediction: {[f'{x:.3f}' for x in tcn['raw_prediction']]}")
                print(f"      ‚úÖ USANDO MODELO TCN REAL")
            else:
                print(f"      ‚ö†Ô∏è Usando se√±al b√°sica/fallback")
        
        # Test directo de predicci√≥n TCN
        print(f"\nü§ñ TEST DIRECTO DE PREDICCIONES TCN:")
        
        for symbol in test_prices:
            if symbol in manager.tcn_models:
                tcn_pred = await manager._get_tcn_prediction(symbol, test_prices[symbol])
                
                if tcn_pred:
                    print(f"   ‚úÖ {symbol}: {tcn_pred['action']} ({tcn_pred['confidence']:.1%})")
                    print(f"      Raw: {[f'{x:.3f}' for x in tcn_pred['raw_prediction']]}")
                else:
                    print(f"   ‚ùå {symbol}: Predicci√≥n fall√≥")
            else:
                print(f"   ‚ö†Ô∏è {symbol}: Modelo no disponible")
        
        # Verificar diferencia entre TCN y fallback
        print(f"\nüîç COMPARANDO TCN vs FALLBACK:")
        
        # Temporal: desactivar TCN
        manager.tcn_models_active = False
        fallback_signals = await manager._generate_simple_signals(test_prices)
        
        # Reactivar TCN
        manager.tcn_models_active = True
        tcn_signals = await manager._generate_simple_signals(test_prices)
        
        print(f"   Se√±ales TCN: {len(tcn_signals)}")
        print(f"   Se√±ales Fallback: {len(fallback_signals)}")
        
        # Comparar fuentes
        for symbol in test_prices:
            tcn_reason = tcn_signals.get(symbol, {}).get('reason', 'No signal')
            fallback_reason = fallback_signals.get(symbol, {}).get('reason', 'No signal')
            
            print(f"   {symbol}:")
            print(f"      TCN: {tcn_reason}")
            print(f"      Fallback: {fallback_reason}")
            
            if tcn_reason == 'tcn_model_prediction':
                print(f"      ‚úÖ TCN funcionando correctamente")
            elif tcn_reason == 'basic_fallback_signal':
                print(f"      ‚ö†Ô∏è Usando fallback en lugar de TCN")
            else:
                print(f"      ‚ùå Sin se√±al generada")
        
        print(f"\nüéØ RESUMEN:")
        tcn_working = any('tcn_model_prediction' in signals.get(s, {}).get('reason', '') for s in test_prices)
        
        if tcn_working:
            print(f"   ‚úÖ MODELOS TCN EST√ÅN FUNCIONANDO PARA SE√ëALES")
            print(f"   üéØ El sistema usa predicciones reales de TCN")
        else:
            print(f"   ‚ö†Ô∏è MODELOS TCN NO SE USAN PARA SE√ëALES")
            print(f"   üîÑ Sistema usa solo fallbacks/se√±ales b√°sicas")
        
    except Exception as e:
        print(f"‚ùå Error en test: {e}")

if __name__ == "__main__":
    asyncio.run(test_tcn_signals()) 