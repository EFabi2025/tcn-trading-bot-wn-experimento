#!/usr/bin/env python3
"""
üß™ TEST FINAL DE CONFIGURACI√ìN COMPLETA
========================================
Prueba todas las configuraciones necesarias para el trading bot
"""

import os
import sys
import asyncio
import aiohttp
from dotenv import load_dotenv

async def test_binance_connection():
    """Prueba la conexi√≥n con Binance usando las credenciales del .env"""
    print("üîß Probando conexi√≥n con Binance...")
    
    load_dotenv()
    
    api_key = os.getenv('BINANCE_API_KEY')
    base_url = os.getenv('BINANCE_BASE_URL')
    
    if not api_key or not base_url:
        print("‚ùå Credenciales de Binance no encontradas")
        return False
    
    try:
        headers = {'X-MBX-APIKEY': api_key}
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{base_url}/api/v3/exchangeInfo", headers=headers) as response:
                if response.status == 200:
                    print("‚úÖ Conexi√≥n con Binance exitosa")
                    return True
                else:
                    print(f"‚ùå Error de conexi√≥n Binance: {response.status}")
                    return False
    except Exception as e:
        print(f"‚ùå Error conectando con Binance: {e}")
        return False

async def test_discord_webhook():
    """Prueba el webhook de Discord"""
    print("üîß Probando Discord webhook...")
    
    discord_url = os.getenv('DISCORD_WEBHOOK_URL')
    if not discord_url:
        print("‚ùå Discord webhook no encontrado")
        return False
    
    # Limpiar comillas si las hay
    discord_url = discord_url.strip('"')
    
    try:
        test_message = {
            "content": "üß™ **TEST BOT CONFIGURATION**\n‚úÖ Bot configurado correctamente\nüéØ Sistema listo para trading"
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(discord_url, json=test_message) as response:
                if response.status in [200, 204]:
                    print("‚úÖ Discord webhook funcionando")
                    return True
                else:
                    print(f"‚ùå Error Discord webhook: {response.status}")
                    return False
    except Exception as e:
        print(f"‚ùå Error enviando a Discord: {e}")
        return False

def test_environment_variables():
    """Verifica todas las variables de entorno necesarias"""
    print("üîß Verificando variables de entorno...")
    
    required_vars = [
        'BINANCE_API_KEY',
        'BINANCE_SECRET_KEY', 
        'DISCORD_WEBHOOK_URL',
        'BINANCE_BASE_URL',
        'ENVIRONMENT'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå Variables faltantes: {', '.join(missing_vars)}")
        return False
    else:
        print("‚úÖ Todas las variables de entorno presentes")
        return True

def test_model_files():
    """Verifica que los archivos de modelos existen"""
    print("üîß Verificando archivos de modelos TCN...")
    
    models_dir = "models"
    required_models = [
        "tcn_final_btcusdt.h5",
        "tcn_final_ethusdt.h5", 
        "tcn_final_bnbusdt.h5",
        "feature_scalers_fixed.pkl"
    ]
    
    missing_models = []
    for model in required_models:
        model_path = os.path.join(models_dir, model)
        if not os.path.exists(model_path):
            missing_models.append(model)
    
    if missing_models:
        print(f"‚ùå Modelos faltantes: {', '.join(missing_models)}")
        return False
    else:
        print("‚úÖ Todos los modelos TCN encontrados")
        return True

async def run_complete_test():
    """Ejecuta todas las pruebas"""
    print("üöÄ INICIANDO PRUEBA COMPLETA DE CONFIGURACI√ìN")
    print("=" * 60)
    
    load_dotenv()
    
    # Verificar variables de entorno
    env_ok = test_environment_variables()
    print()
    
    # Verificar modelos
    models_ok = test_model_files()
    print()
    
    # Verificar conexi√≥n Binance
    binance_ok = await test_binance_connection()
    print()
    
    # Verificar Discord webhook
    discord_ok = await test_discord_webhook()
    print()
    
    print("=" * 60)
    print("üìä RESUMEN DE PRUEBAS:")
    print(f"   {'‚úÖ' if env_ok else '‚ùå'} Variables de entorno")
    print(f"   {'‚úÖ' if models_ok else '‚ùå'} Archivos de modelos TCN")
    print(f"   {'‚úÖ' if binance_ok else '‚ùå'} Conexi√≥n Binance API")
    print(f"   {'‚úÖ' if discord_ok else '‚ùå'} Discord webhook")
    
    all_ok = env_ok and models_ok and binance_ok and discord_ok
    
    print("=" * 60)
    if all_ok:
        print("üéâ ¬°CONFIGURACI√ìN COMPLETAMENTE EXITOSA!")
        print("üöÄ El bot est√° listo para trading en vivo")
        print("‚ö†Ô∏è RECORDATORIO: Est√°s en modo PRODUCCI√ìN con dinero real")
    else:
        print("‚ùå CONFIGURACI√ìN INCOMPLETA")
        print("üîß Revisa los errores arriba antes de continuar")
    
    return all_ok

if __name__ == "__main__":
    asyncio.run(run_complete_test()) 